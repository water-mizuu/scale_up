{

import "package:flutter/foundation.dart";
import "package:scale_up/data/sources/lessons/lessons_helper/numerical_expression.dart";
import "package:scale_up/data/sources/lessons/lessons_helper/boolean_expression.dart";

num readEnv(Map<String, Object> env, NumericalExpression key) {
  try {
    var value = key.evaluate(env);

    return value;
  } on Object {
    if (kDebugMode) {
      print("Failed to read the variable $key.");
    }

    rethrow;
  }
}

}

BooleanExpression rule = ^ :or $ { or };

BooleanExpression or =
  | :or _ "|" _ :and { OrExpression(or, and) }
  | and;

BooleanExpression and =
  | :and _ "&" _ :not { AndExpression(and, not) }
  | not;

BooleanExpression not =
  | _ "!" $:not { NotExpression($) }
  | atomic;

BooleanExpression atomic =
  | left:numeric.expr leftCmp:LESS_OR_EQ mid:numeric.expr rightCmp:LESS_OR_EQ right:numeric.expr (){
      var leftFn = leftCmp == "<="
        ? (num l, num r) => l <= r
        : (num l, num r) => l < r;
      var rightFn = rightCmp == "<="
        ? (num l, num r) => l <= r
        : (num l, num r) => l < r;

      return LambdaBooleanExpression((env) {
        try {
          var leftValue = readEnv(env, left);
          var middleValue = readEnv(env, mid);
          var rightValue = readEnv(env, right);

          return leftFn(leftValue, middleValue) && rightFn(middleValue, rightValue);
        } on Object catch (e) {
          if (kDebugMode) {
            print("Error caught in evaluation: $e");
          }
          return false;
        }
      });
    }
  | left:numeric.expr op:CMP right:numeric.expr () {
      var cmp = switch (op) {
        "<=" => (num l, num r) => l <= r,
        "<"  => (num l, num r) => l < r,
        ">=" => (num l, num r) => l >= r,
        ">"  => (num l, num r) => l > r,
        "="  => (num l, num r) => l == r,
        "!=" => (num l, num r) => l != r,
        _ => throw Error(),
      };

      return LambdaBooleanExpression((env) {
        try {
          var leftValue = readEnv(env, left);
          var rightValue = readEnv(env, right);

          return cmp(leftValue, rightValue);
        } on Object catch (e) {
          if (kDebugMode) {
            print("Error caught in evaluation: $e");
          }
          return false;
        }
      });
    }
  | "(" _ $:or _ ")";

LESS_OR_EQ = _ $:("<" | "<=") _;
CMP = _ $:<("<" | ">") "="?|"!"? "="> _;

numeric {
  NumericalExpression expr =
    | :expr _ "+" _ :term { AdditionExpression(expr, term) }
    | :expr _ "-" _ :term { SubtractionExpression(expr, term) }
    | term;

  NumericalExpression term =
    | :term _ "*" _ :preUnary  { MultiplicationExpression(term, preUnary) }
    | :term _ "/" _ :preUnary  { DivisionExpression(term, preUnary) }
    | preUnary;

  NumericalExpression preUnary =
    | "-" _ :preUnary { NegationExpression(preUnary) }
    | factor;

  NumericalExpression factor =
    | :primary _ "^" _ :factor { PowerExpression(primary, factor) }
    | primary;

  NumericalExpression primary =
    | "(" _ :expr _ ")" { expr }
    | number;

  NumericalExpression number =
    | json.atom.number { ConstantExpression(double.parse(span)) }
    | \d+ { ConstantExpression(int.parse(span)) }
    | [A-Za-z_] [A-Za-z0-9_]* { VariableExpression(span) };
}

_ = \s* { () };